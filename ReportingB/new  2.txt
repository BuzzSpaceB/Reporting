/**Edited by Mkhabela Phethile 3/19/2015**/
/**the importThreadAppraisal Function gets a csv file as input from the exportThreadAppraisal function, the function then checks that the member and the appraisal are valid, calls assignAppraisalToPost for each field if valid and throws an exception if invalid**/
/**This function requires you to run in on a server like Apache, I used usbwebserver**/
function importThreadAppraisal(filename)//function gets the name of the file as input same file from exportThreadAppraisal(),this is how i achieved the functionality <a href="#" onclick="importThreadAppraisal('yes.csv')">test</a>
{
    //variable used for request purposes
  var req;
    if (window.XMLHttpRequest) {
        // supported by the following browsers: IE7+, Firefox, Chrome, Opera, Safari
        req = new XMLHttpRequest();
    } else {
        //for IE6, IE5
        req = new ActiveXObject('Microsoft.XMLHTTP');
    }
    //this part loads the file, using GET
    req.open('GET',filename,false);
    req.send();
    //storing the request's response text to the data variable
    var data = req.responseText;
   // alert(data);
    //calling the csvToarray function to populate the array with the csv data from the response text
   // var dataArray=csvToarray(data,',');
    //alert(dataArray[0]);
parseData(data);
}
//parse csv 
function parseData(data)
{
//alert(data);
//replace UNIX new lines
data = data.replace (/\r\n/g, "\n");
//replace MAC new lines
data = data.replace (/\r/g, "\n");
//split csv data into rows
var rows = data.split("\n");

for (var i = 0; i < rows.length; i++) {
//alert(rows[i]);
  // this line helps to skip empty rows
    if (rows[i]) {
        // our columns are separated by comma
        var column = rows[i].split(",");
		
		//column is an array now, the first item is the parent id
		var parentId=column[0];
		//The second item is the author 
		var author=column[1];
		//the third item is the timestamp
		var timestamp=column[2];
		//the fourth is the content
		var content=column[3];
		//the fifth is the status
		var status=column[4];
		//the sixth is th memberID
		var memberId=column[5];
		//the seventh is the appraisal id
		var appraisalId=column[6];
		//the eight is the appraisal value
		var appraisalValue=column[7];
		/*alert(parentId);
		alert(author);
		alert(timestamp);
		alert(content);
		alert(status);
		alert(memberId);
		alert(appraisalId);
		alert(appraisalValue);
		var obj={
		parentid:parentId,
		author:author,
		timestamp:timestamp,
		content:content,
		status:status,
		memberid:memberId,
		appraisalid:appraisalId,
		appraisalvalue:appraisalValue
		}
		*/
	if(isValid(appraisalValue)&&isAuthorised(memberId)) alert("valid");
	else alert("ooops");
		//assign(memberId,appraisalValue);
	
		
}
}
}
//function that checks if a the member is authorised
function isAuthorised(memberId)
{
try {
  //I was not sure how to go about validating i a member is authorised to assign an appraisal to a post, hope this is sufficient
	if(memberId == "") throw "empty"; else return true;
        if(isNaN(memberId)) throw "not a number"; else return true;
   }
catch(err) {
      message.innerHTML = "Member Identfication is " + err;
}
}
//function that checks if the appraisal value are valid
function isValid(appraisalValue)
{
try {
  //I was not sure what  the highest appraisal value could be so i decided on 10, you may alter this if you wish
	if(appraisalValue == "") throw "empty"; else return true;
        if(isNaN(appraisalValue)) throw "not a number"; else return true;
        if(appraisalValue < 1) throw "too low"; else return true;
        if(appraisalValue > 10) throw "too high"; else return true;
   }
catch(err) {
      message.innerHTML = "Appraisal Value is " + err;
}
}

//function that calls assign appraisal to post
function assign(memberId,appraisalValue)
{
try {
  //if(isAuthorised(memberId)&&isValid(appraisalValue))
	//	{
		//i wasnt sure how this function worked...
		//assignAppraisalToPost(appraisalValue);
		//}
		//else
			//{throw "Could not assign Appraisal to Post"}
   }
catch(err) {
      message.innerHTML = "Error: " + err;
}
}
